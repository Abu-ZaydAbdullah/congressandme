{"id":"node_modules/rst-selector-parser/dist/createParser.js","dependencies":[{"name":"/Users/abu-zaydabdullah/Documents/congressconversation/node_modules/rst-selector-parser/dist/createParser.js.map","includedInParent":true,"mtime":1508516789000},{"name":"/Users/abu-zaydabdullah/Documents/congressconversation/package.json","includedInParent":true,"mtime":1574135091811},{"name":"/Users/abu-zaydabdullah/Documents/congressconversation/node_modules/rst-selector-parser/package.json","includedInParent":true,"mtime":1574134609756},{"name":"nearley","loc":{"line":7,"column":23},"parent":"/Users/abu-zaydabdullah/Documents/congressconversation/node_modules/rst-selector-parser/dist/createParser.js","resolved":"/Users/abu-zaydabdullah/Documents/congressconversation/node_modules/nearley/lib/nearley.js"},{"name":"./grammar","loc":{"line":9,"column":23},"parent":"/Users/abu-zaydabdullah/Documents/congressconversation/node_modules/rst-selector-parser/dist/createParser.js","resolved":"/Users/abu-zaydabdullah/Documents/congressconversation/node_modules/rst-selector-parser/dist/grammar.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _nearley = require('nearley');\n\nvar _grammar = require('./grammar');\n\nvar _grammar2 = _interopRequireDefault(_grammar);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*:: import type {\n  CombinatorTokenType,\n  SelectorTokenType\n} from './types';*/ // @flow\n\nexports.default = function () {\n  var parse = function parse(selector /*: string*/) /*: Array<SelectorTokenType | CombinatorTokenType>*/ {\n    var parser = new _nearley.Parser(_grammar2.default.ParserRules, _grammar2.default.ParserStart);\n\n    var results = parser.feed(selector).results;\n\n    if (results.length === 0) {\n      throw new Error('Found no parsings.');\n    }\n\n    if (results.length > 1) {\n      throw new Error('Ambiguous results.');\n    }\n\n    return results[0];\n  };\n\n  return {\n    parse: parse\n  };\n};\n"},"sourceMaps":{"js":{"version":3,"sources":["../src/createParser.js"],"names":["parse","selector","parser","ParserRules","ParserStart","results","feed","length","Error"],"mappings":";;;;;;AAEA;;AAOA;;;;;;;;;oBATA;;kBAWe,YAAM;AACnB,MAAMA,QAAQ,SAARA,KAAQ,CAACC,QAAD,oEAAsE;AAClF,QAAMC,SAAS,oBAAW,kBAAQC,WAAnB,EAAgC,kBAAQC,WAAxC,CAAf;;AAEA,QAAMC,UAAUH,OAAOI,IAAP,CAAYL,QAAZ,EAAsBI,OAAtC;;AAEA,QAAIA,QAAQE,MAAR,KAAmB,CAAvB,EAA0B;AACxB,YAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;AACD;;AAED,QAAIH,QAAQE,MAAR,GAAiB,CAArB,EAAwB;AACtB,YAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;AACD;;AAED,WAAOH,QAAQ,CAAR,CAAP;AACD,GAdD;;AAgBA,SAAO;AACLL;AADK,GAAP;AAGD,C","file":"createParser.js","sourcesContent":["// @flow\n\nimport {\n  Parser\n} from 'nearley';\nimport type {\n  CombinatorTokenType,\n  SelectorTokenType\n} from './types';\nimport grammar from './grammar';\n\nexport default () => {\n  const parse = (selector: string): Array<SelectorTokenType | CombinatorTokenType> => {\n    const parser = new Parser(grammar.ParserRules, grammar.ParserStart);\n\n    const results = parser.feed(selector).results;\n\n    if (results.length === 0) {\n      throw new Error('Found no parsings.');\n    }\n\n    if (results.length > 1) {\n      throw new Error('Ambiguous results.');\n    }\n\n    return results[0];\n  };\n\n  return {\n    parse\n  };\n};\n"]}},"error":null,"hash":"0725bb9ac66d2e8aa2c6376c885384d1","cacheData":{"env":{}}}